    clear all;        fileIn = 'MIGlobalDataStructsDefines.h';    %fileIn = '/Documents/Lablib/Applications/Knot/ECEyeCalibrator.h';        fileOut = 'MIGlobalDataStructsDefinesLLDataDefs.h';    %fileOut = '/Documents/Lablib/Applications/Knot/ECEyeCalibratorLLDataDefs.h';        fid = fopen(fileOut,'w');    file = textread(fileIn,'%s','delimiter','\n','whitespace','');        % find start of each struct    structStartIndex = strmatch('typedef struct', file);        for j = (structStartIndex(:))'                clear o;                s = cellstr(file(j : end));                % find first }        k = strmatch('}', s);                s = cellstr(s(1 : k(1)));                % s is now cell array with only struct                [tok, rem] = strtok(s{end});        structName = strtok(strtok(rem), ';');                o{1} = ['LLDataDef ' structName 'Desc[] = {'];        count = 2;        for i = 2 : length(s) - 1                        x = s{i};                        % find // and remove all characters after            k = strfind(x, '//');            if ~isempty(x)                x(k:end) = [];            end                        if ~isempty(strtok(x)) % check is empty string                [dataType, rem] = strtok(x);                fieldName = strtok(strtok(rem), ';');                % is fieldName an array                tok = findstr(fieldName,'[');                if ~isempty(tok)                    [fieldName, rem] = strtok(fieldName, '[');                    numberOfElements = strtok(rem,'[]');                else                    numberOfElements = '1';                end                % is dataType one of the standard                if strcmp(dataType,'BOOL')                    dataType = 'boolean';                end                if ~isempty(findstr(dataType, 'char boolean short long float double'))                    o{count} = ['   {@"' dataType '", @"' fieldName '", ' numberOfElements ', offsetof(' structName ', ' fieldName ')},'];                else                    o{count} = ['   {@"struct", @"' fieldName '", ' numberOfElements ', offsetof(' structName ', ' fieldName '), sizeof(' dataType '), ' dataType 'Desc},'];                end                count = count + 1;            end                    end        o{count} = '    {nil}};';        o{count+1} = ' ';                z = char(o)                for i = 1 : size(z,1)            fprintf(fid,'%s\n',z(i,:));        end    end        fclose(fid);    